-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Text encrypting using RSA and AES-GCM
--   
--   Text encrypting using RSA and AES-GCM
@package e
@version 0.0.0


-- | ByteString encryption routines
module Data.ByteString.Encrypt

-- | Unified interface for encryption routines.
class (Eq e, Show e) => Encryptable e

-- | Encrypt using given <a>PublicKey</a>.
encrypt :: (Encryptable e, CryptoRandomGen g) => PublicKey -> e -> g -> Either EncryptError (Encrypted e, g)

-- | Decrypt using given <a>PrivateKey</a>.
decrypt :: Encryptable e => PrivateKey -> Encrypted e -> Either DecryptError e

-- | Convert encrypted value to <a>String</a>.
showEnc :: Encryptable e => Encrypted e -> String

-- | Read encrypted value from <a>String</a>.
readEnc :: Encryptable e => String -> Maybe (Encrypted e)

-- | Encrypted value.
data Encrypted e
Encrypted :: ByteString -> e -> Encrypted e

-- | AES-GCM input values (key, iv and tag) RSA-encrypted using given
--   public key.
[_encryptedKeys] :: Encrypted e -> ByteString

-- | AES-GCM-encrypted value.
[_ciphered] :: Encrypted e -> e

-- | Encryption error.
data EncryptError

-- | <a>RSAError</a>.
EncryptRSAError :: RSAError -> EncryptError

-- | Error in random bytes generation.
EncryptGenError :: GenError -> EncryptError

-- | Size of public key is unappropriately small (less than a 64 bytes).
EncryptKeySizeError :: EncryptError

-- | Decryption error.
data DecryptError

-- | <a>RSAError</a>.
DecryptRSAError :: RSAError -> DecryptError

-- | Error in random bytes generation.
DecryptGenError :: GenError -> DecryptError

-- | Error in AES decryption.
DecryptAESError :: AESError -> DecryptError

-- | Encoded keys is not a valid base64 encoded data.
DecryptBase64Error :: String -> DecryptError

-- | AES error.
data AESError

-- | Authentication tag mismatch.
TagMismatch :: AESError
instance GHC.Show.Show Data.ByteString.Encrypt.DecryptError
instance GHC.Classes.Eq Data.ByteString.Encrypt.DecryptError
instance GHC.Show.Show Data.ByteString.Encrypt.AESError
instance GHC.Classes.Eq Data.ByteString.Encrypt.AESError
instance GHC.Show.Show Data.ByteString.Encrypt.EncryptError
instance GHC.Classes.Eq Data.ByteString.Encrypt.EncryptError
instance GHC.Classes.Eq e => GHC.Classes.Eq (Data.ByteString.Encrypt.Encrypted e)
instance GHC.Show.Show e => GHC.Show.Show (Data.ByteString.Encrypt.Encrypted e)
instance GHC.Base.Functor Data.ByteString.Encrypt.Encrypted
instance Data.ByteString.Encrypt.Encryptable Data.ByteString.Internal.ByteString
instance Data.ByteString.Encrypt.Encryptable Data.Text.Internal.Text


-- | Key management
module Control.E.Keys.Internal

-- | <a>FilePath</a> of a key store. Return a value of
--   <tt>$E_KEYS_STORE</tt> environment variable if defined. Return
--   <tt>~/.encrypt-keys</tt> otherwise.
--   
--   Note: this method isn't supposed to create such directory if it
--   doesn't exist.
getStorePath :: IO FilePath

-- | Lookup private key from key store.
lookupPrivate :: String -> FilePath -> IO (Maybe PrivateKey)

-- | Lookup public key from key store.
lookupPublic :: String -> FilePath -> IO (Maybe PublicKey)

-- | Any possible state of a given key's presence.
data KeyPresence

-- | Only private key exists.
Private :: KeyPresence

-- | Only public key exists.
Public :: KeyPresence

-- | Both private and public keys exist.
Both :: KeyPresence

-- | Neither private nor public keys exist.
None :: KeyPresence

-- | ಥ_ಥ.

-- | Does this <a>KeyPresence</a> include public key?
hasPublic :: KeyPresence -> Bool

-- | Does this <a>KeyPresence</a> include private key?
hasPrivate :: KeyPresence -> Bool

-- | Read keys from a given store.
readStore :: FilePath -> IO (HashMap String KeyPresence)

-- | List all keys in key store.
list :: IO ()

-- | Generate keypair with a given keyId.
generate :: Maybe String -> IO ()
generate' :: String -> IO ()
writeFileIfNotExist :: FilePath -> String -> IO () -> IO ()

-- | Remove keypair with a given keyId from key store.
removeKey :: String -> IO ()

-- | Generate random string.
randomStr :: Int -> IO String
instance GHC.Show.Show Control.E.Keys.Internal.KeyPresence
instance GHC.Classes.Eq Control.E.Keys.Internal.KeyPresence
instance GHC.Base.Monoid Control.E.Keys.Internal.KeyPresence


-- | Key management
module Control.E.Keys

-- | List all keys in key store.
list :: IO ()

-- | Lookup private key from key store.
lookupPrivate :: String -> FilePath -> IO (Maybe PrivateKey)

-- | Lookup public key from key store.
lookupPublic :: String -> FilePath -> IO (Maybe PublicKey)

-- | Generate keypair with a given keyId.
generate :: Maybe String -> IO ()

-- | <a>FilePath</a> of a key store. Return a value of
--   <tt>$E_KEYS_STORE</tt> environment variable if defined. Return
--   <tt>~/.encrypt-keys</tt> otherwise.
--   
--   Note: this method isn't supposed to create such directory if it
--   doesn't exist.
getStorePath :: IO FilePath


-- | <tt>Text</tt> templating mechanism with a power of <a>Encrypt</a>
module Data.Text.Template.Encrypt

-- | Templating error occurred during encryption.
data EncryptTemplateError

-- | Malformed syntax.
EncryptSyntaxError :: SyntaxError -> EncryptTemplateError

-- | Given public key doesn't exist in key store.
PublicKeyNotFound :: EncryptTemplateError

-- | Internal <a>EncryptError</a>.
EncryptError :: EncryptError -> EncryptTemplateError

-- | Templating error occurred during decryption.
data DecryptTemplateError

-- | Given private key doesn't exist in key store.
PrivateKeyNotFound :: DecryptTemplateError

-- | Malformed syntax.
DecryptSyntaxError :: SyntaxError -> DecryptTemplateError

-- | Internal <a>DecryptError</a>.
DecryptError :: DecryptError -> DecryptTemplateError

-- | Syntax error.
data SyntaxError

-- | Closing braces is missed.
MissingClosingBraces :: SyntaxError

-- | Plain text part is missed.
MissingPlainText :: SyntaxError

-- | Invalid format.
InvalidFormat :: SyntaxError

-- | Encrypt given <a>Text</a>.
--   
--   <pre>
--   &gt; encrypt "This is {{id01|nice}}!"
--   "This is {{id01|&lt;some hash&gt;|&lt;some hash&gt;}}!"
--   </pre>
encrypt :: forall g. CryptoRandomGen g => Text -> g -> IO (Either EncryptTemplateError Text, g)

-- | Decrypt given <a>Text</a>.
--   
--   <pre>
--   &gt; decrypt "This is {{id01|&lt;some hash&gt;|&lt;some hash&gt;}}!"
--   "This is nice!"
--   </pre>
decrypt :: Text -> IO (Either DecryptTemplateError Text)
instance GHC.Show.Show Data.Text.Template.Encrypt.EncryptTemplateError
instance GHC.Classes.Eq Data.Text.Template.Encrypt.EncryptTemplateError
instance GHC.Show.Show Data.Text.Template.Encrypt.DecryptTemplateError
instance GHC.Classes.Eq Data.Text.Template.Encrypt.DecryptTemplateError
instance GHC.Show.Show Data.Text.Template.Encrypt.SyntaxError
instance GHC.Classes.Eq Data.Text.Template.Encrypt.SyntaxError


-- | <a>FilePath</a> templating mechanism with a power of <a>Encrypt</a>.
module System.Template.Encrypt

-- | For a given template update all the plain-text holes with encrypted
--   values and produce a file in a given filepath.
encrypt :: FilePath -> FilePath -> IO (Maybe EncryptSystemError)

-- | For a given template update all the encrypted-text holes with
--   decrypted values and produce a file in a given filepath.
decrypt :: FilePath -> FilePath -> IO (Maybe DecryptSystemError)

-- | Templating error occurred during encryption.
data EncryptSystemError

-- | <a>FSError</a> occurred during encryption.
EncryptFSError :: FSError -> EncryptSystemError

-- | Internal <a>EncryptTemplateError</a>.
EncryptTemplateError :: EncryptTemplateError -> EncryptSystemError

-- | Templating error occurred during decryption.
data DecryptSystemError

-- | <a>FSError</a> occurred during decryption.
DecryptFSError :: FSError -> DecryptSystemError

-- | Internal <a>DecryptTemplateError</a>.
DecryptTemplateError :: DecryptTemplateError -> DecryptSystemError

-- | File system related error.
data FSError

-- | Input file doesn't exist.
InputFileNotFound :: FSError

-- | Directory where output should be generated at doesn't exist.
OutputDirectoryNotFound :: FSError
instance GHC.Show.Show System.Template.Encrypt.EncryptSystemError
instance GHC.Classes.Eq System.Template.Encrypt.EncryptSystemError
instance GHC.Show.Show System.Template.Encrypt.DecryptSystemError
instance GHC.Classes.Eq System.Template.Encrypt.DecryptSystemError
instance GHC.Show.Show System.Template.Encrypt.FSError
instance GHC.Classes.Eq System.Template.Encrypt.FSError
